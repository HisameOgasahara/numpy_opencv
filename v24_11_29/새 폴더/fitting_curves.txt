{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 기존 코드 가져오기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "import pickle\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "calibration_data = pickle.load(open('calibration_data.p','rb'))\n",
    "\n",
    "matrix = calibration_data['camera_matrix']\n",
    "dist_coef = calibration_data['distortion_coefficient']\n",
    "\n",
    "source_points = [(580, 460), (205, 720), (1110, 720), (703, 460)]\n",
    "dest_points = [(320, 0), (320, 720), (960, 720), (960, 0)]\n",
    "\n",
    "warp_matrix = cv2.getPerspectiveTransform(np.float32(source_points), np.float32(dest_points))\n",
    "inv_warp_matrix = cv2.getPerspectiveTransform(np.float32(dest_points), np.float32(source_points))\n",
    "\n",
    "p = { 'sat_thresh': 120, 'light_thresh': 40, 'light_thresh_agr': 205,\n",
    "      'grad_thresh': (0.7, 1.4), 'mag_thresh': 40, 'x_thresh': 20 }\n",
    "\n",
    "sat_thresh = 120\n",
    "light_thresh = 40\n",
    "light_thresh_agr = 205\n",
    "grad_min = 0.7; grad_max = 1.4\n",
    "mag_thresh = 40\n",
    "x_thresh = 20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "def birdeye_sky_view(ground_image):\n",
    "    temp_image = cv2.undistort(ground_image, matrix, dist_coef, None, matrix)\n",
    "    shape = (temp_image.shape[1] ,temp_image.shape[0]) # (width,height)\n",
    "    # 위쪽에 이미 구해놓았음\n",
    "    # warp_matrix = cv2.getPerspectiveTransform(np.float32(source_points), np.float32(dest_points))\n",
    "    warp_image = cv2.warpPerspective(temp_image, warp_matrix, shape, flags=cv2.INTER_LINEAR)\n",
    "    \n",
    "    return warp_image\n",
    "\n",
    "def apply_color_mask(img_hls):   \n",
    "    img_l = img_hls[:, :, 1]\n",
    "    img_s = img_hls[:, :, 2]\n",
    "    color_cond1 = (img_s > sat_thresh) & (img_l > light_thresh)\n",
    "    color_cond2 = img_l > light_thresh_agr\n",
    "    b = np.zeros_like(img_s)\n",
    "    b[(color_cond1 | color_cond2)] = 1\n",
    "    return b\n",
    "\n",
    "def scale_abs(x, m=255):\n",
    "    x = np.absolute(x)\n",
    "    x = np.uint8(m * x / np.max(x))\n",
    "    return x\n",
    "\n",
    "def roi(gray, mn = 125, mx = 1200):\n",
    "  m = np.copy(gray) + 1\n",
    "  m[:, :mn] = 0 \n",
    "  m[:, mx:] = 0 \n",
    "  return m \n",
    "\n",
    "def show_images(imgs, per_row = 3, per_col = 2, W = 10, H = 5, tdpi = 80):\n",
    "      \n",
    "  fig, ax = plt.subplots(per_col, per_row, figsize = (W, H), dpi = tdpi)\n",
    "  ax = ax.ravel()\n",
    "  \n",
    "  for i in range(len(imgs)):\n",
    "    img = imgs[i]\n",
    "    ax[i].imshow(img)\n",
    "  \n",
    "  for i in range(per_row * per_col):\n",
    "    ax[i].axis('off')\n",
    "\n",
    "def apply_sobel_mask(img_hls):\n",
    "    img_l = img_hls[:, :, 1]\n",
    "    img_s = img_hls[:, :, 2]  \n",
    "    img_z = np.zeros_like(img_s)     \n",
    "    lx = cv2.Sobel(img_l, cv2.CV_64F, 1, 0, ksize = 5)\n",
    "    ly = cv2.Sobel(img_l, cv2.CV_64F, 0, 1, ksize = 5)\n",
    "    gradl = np.arctan2(np.absolute(ly), np.absolute(lx))\n",
    "    l_mag = np.sqrt(lx**2 + ly**2)\n",
    "    slm, slx, sly = scale_abs(l_mag), scale_abs(lx), scale_abs(ly)\n",
    "    b = np.zeros_like(img_s)\n",
    "    sobel_cond1 = slm > mag_thresh\n",
    "    sobel_cond2 = slx > x_thresh\n",
    "    sobel_cond3 = (gradl > grad_min) & (gradl < grad_max)\n",
    "    b[(sobel_cond1 & sobel_cond2 & sobel_cond3)] = 1  \n",
    "    return b \n",
    "\n",
    "def sobel_breakdown(img): #RGB\n",
    "    img_hls = cv2.cvtColor(img, cv2.COLOR_RGB2HLS)\n",
    "    img_l = img_hls[:, :, 1]\n",
    "    img_s = img_hls[:, :, 2]  \n",
    "    img_z = np.zeros_like(img_s)     \n",
    "    lx = cv2.Sobel(img_l, cv2.CV_64F, 1, 0, ksize = 5)\n",
    "    ly = cv2.Sobel(img_l, cv2.CV_64F, 0, 1, ksize = 5)\n",
    "    gradl = np.arctan2(np.absolute(ly), np.absolute(lx))\n",
    "    l_mag = np.sqrt(lx**2 + ly**2)\n",
    "    slm, slx, sly = scale_abs(l_mag), scale_abs(lx), scale_abs(ly)\n",
    "    sobel_cond1 = slm > mag_thresh\n",
    "    sobel_cond2 = slx > x_thresh\n",
    "    sobel_cond3 = (gradl > grad_min) & (gradl < grad_max)\n",
    "    b1, b2, b3 = img_z.copy(), img_z.copy(), img_z.copy()\n",
    "    b1[(sobel_cond1)] = 255\n",
    "    b2[(sobel_cond2)] = 255\n",
    "    b3[(sobel_cond3)] = 255\n",
    "    return np.dstack((b1, b2,b3))\n",
    "\n",
    "def color_breakdown(rgb_image):\n",
    "    img_hls = cv2.cvtColor(rgb_image, cv2.COLOR_RGB2HLS)\n",
    "    img_l = img_hls[:, :, 1]\n",
    "    img_s = img_hls[:, :, 2]\n",
    "    img_z = np.zeros_like(img_s)\n",
    "    color_cond1 = (img_s > sat_thresh) & (img_l > light_thresh)\n",
    "    color_cond2 = img_l > light_thresh_agr\n",
    "    b1, b2 = img_z.copy(), img_z.copy()\n",
    "    b1[(color_cond1)] = 255\n",
    "    b2[(color_cond2)] = 255\n",
    "    return np.dstack((b1, b2, img_z))\n",
    "\n",
    "def lane_filter_apply(rgb_image):\n",
    "    img_hls = cv2.cvtColor(rgb_image, cv2.COLOR_BGR2HLS)   \n",
    "    color_img = apply_color_mask(img_hls)\n",
    "    sobel_img = apply_sobel_mask(img_hls)\n",
    "    filtered_img = cv2.bitwise_or(sobel_img, color_img)\n",
    "    return filtered_img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def next_y(w, h=720, window_height=80):\n",
    "  y_lo = h - (w + 1) * window_height\n",
    "  y_hi = h - w * window_height \n",
    "  return y_lo, y_hi\n",
    "\n",
    "def next_x(current ,margin=100):\n",
    "  x_left = current - margin\n",
    "  x_right = current + margin\n",
    "  return x_left, x_right\n",
    "\n",
    "def next_midx(current, all_pixels_x, pixel_indices, min_pix=50):\n",
    "    if len(pixel_indices) > min_pix:\n",
    "      current = int(np.mean(all_pixels_x[pixel_indices]))\n",
    "    return current\n",
    "\n",
    "def indices_within_boundary(all_pixels_x, all_pixels_y, y_lo, y_hi, x_left, x_right):\n",
    "  cond1 = all_pixels_y >= y_lo\n",
    "  cond2 = all_pixels_y < y_hi\n",
    "  cond3 = all_pixels_x >= x_left\n",
    "  cond4 = all_pixels_x < x_right\n",
    "  return (cond1 & cond2 & cond3 & cond4 ).nonzero()[0]\n",
    "\n",
    "def get_real_curvature(xs, ys, xm_per_pix=(3.7/700), ym_per_pix=(30/720)):\n",
    "    return np.polyfit(ys * ym_per_pix, xs * xm_per_pix, 2)\n",
    "\n",
    "def radius_of_curvature(y, f):\n",
    "    return ((1 + (2 * f[0] * y + f[1])**2)**(1.5)) / np.absolute(2 * f[0])\n",
    "\n",
    "def pixel_locations(all_pixels_x, all_pixels_y, indices):\n",
    "    return all_pixels_x[indices], all_pixels_y[indices]\n",
    "\n",
    "def curves_fit(binary):  \n",
    "  number_of_windows = 9\n",
    "  margin = 100\n",
    "  minimum_pixels = 50\n",
    "  ym_per_pix = 30 / 720\n",
    "  xm_per_pix = 3.7 / 700\n",
    "  glo_left_pixels_indices, glo_right_pixels_indices = [], []\n",
    "  left_pixels_x, left_pixels_y = None, None\n",
    "  right_pixels_x, right_pixels_y = None, None\n",
    "  left_fit_curve_pix, right_fit_curve_pix = None, None\n",
    "  left_fit_curve_f, right_fit_curve_f = None, None\n",
    "  left_radius, right_radius = None, None\n",
    "  vehicle_position, vehicle_position_words = None, None\n",
    "  result = {}\n",
    "\n",
    "  # store details\n",
    "  out_img = np.dstack((binary, binary, binary)) * 255\n",
    "  h, w = binary.shape[0], binary.shape[1]\n",
    "  mid = h/2\n",
    "  window_height = int(h / number_of_windows)  \n",
    "  all_pixels_x = np.array(binary.nonzero()[1])\n",
    "  all_pixels_y = np.array(binary.nonzero()[0]) \n",
    "\n",
    "  # start : w 각 세로라인별 합을 구해서 그값이 가장 큰 세로줄을 시작으로 (좌/우 구분해서)\n",
    "  hist = np.sum(binary[int(h / 2):, :], axis = 0)\n",
    "  mid = int(hist.shape[0] / 2)\n",
    "  mid_leftx = np.argmax(hist[:mid])\n",
    "  mid_rightx = np.argmax(hist[mid:]) + mid\n",
    "  \n",
    "  left_pixels_indices, right_pixels_indices = [], []\n",
    "  x, y = [None, None, None, None], [None, None]\n",
    "  \n",
    "  for w in range(number_of_windows):\n",
    "    y[0], y[1] = next_y(w)\n",
    "    x[0], x[1] = next_x(mid_leftx) \n",
    "    x[2], x[3] = next_x(mid_rightx)\n",
    "\n",
    "    cv2.rectangle(out_img, (x[0], y[0]), (x[1], y[1]), (255, 0, 0), thickness=4)  \n",
    "    cv2.rectangle(out_img, (x[2], y[0]), (x[3], y[1]), (0, 255, 0), thickness=4)\n",
    "    \n",
    "    curr_left_pixels_indices = indices_within_boundary(all_pixels_x, all_pixels_y, y[0], y[1], x[0], x[1])\n",
    "    curr_right_pixels_indices = indices_within_boundary(all_pixels_x, all_pixels_y,y[0], y[1], x[2], x[3])\n",
    "        \n",
    "    left_pixels_indices.append(curr_left_pixels_indices)\n",
    "    right_pixels_indices.append(curr_right_pixels_indices)\n",
    "    \n",
    "    mid_leftx = next_midx(mid_leftx, all_pixels_x, curr_left_pixels_indices)\n",
    "    mid_rightx = next_midx(mid_rightx, all_pixels_x, curr_right_pixels_indices)\n",
    "    \n",
    "  glo_left_pixels_indices = np.concatenate(left_pixels_indices)\n",
    "  glo_right_pixels_indices = np.concatenate(right_pixels_indices)\n",
    "  \n",
    "  left_pixels_x, left_pixels_y = pixel_locations(all_pixels_x, all_pixels_y, glo_left_pixels_indices)\n",
    "  right_pixels_x, right_pixels_y = pixel_locations(all_pixels_x, all_pixels_y, glo_right_pixels_indices)\n",
    "\n",
    "  left_fit_curve_f = get_real_curvature(left_pixels_x, left_pixels_y)\n",
    "  right_fit_curve_f = get_real_curvature(right_pixels_x, right_pixels_y)\n",
    "  \n",
    "  left_radius = radius_of_curvature(h * ym_per_pix, left_fit_curve_f)\n",
    "  right_radius = radius_of_curvature(h *  ym_per_pix, right_fit_curve_f)\n",
    "\n",
    "  #plot\n",
    "  out_img[left_pixels_y, left_pixels_x] = [255, 0, 255]\n",
    "  out_img[right_pixels_y, right_pixels_x] = [0, 255, 255]\n",
    "\n",
    "  left_fit_curve_pix = np.polyfit(left_pixels_y, left_pixels_x, 2)\n",
    "  right_fit_curve_pix = np.polyfit(right_pixels_y, right_pixels_x, 2)\n",
    "\n",
    "  kl, kr = left_fit_curve_pix, right_fit_curve_pix\n",
    "  ys = np.linspace(0, h - 1, h)\n",
    "  \n",
    "  left_xs = kl[0] * (ys**2) + kl[1] * ys + kl[2]\n",
    "  right_xs = kr[0] * (ys**2) + kr[1] * ys + kr[2]\n",
    "  \n",
    "  xls, xrs, ys = left_xs.astype(np.uint32), right_xs.astype(np.uint32), ys.astype(np.uint32)\n",
    "  \n",
    "  t=4\n",
    "  for xl, xr, y in zip(xls, xrs, ys):\n",
    "      cv2.line(out_img, (xl - t, y), (xl + t, y), (255, 255, 0), int(t / 2))\n",
    "      cv2.line(out_img, (xr - t, y), (xr + t, y), (0, 0, 255), int(t / 2))\n",
    "\n",
    "  #update_vehicle_position\n",
    "  y = h\n",
    "  mid = w / 2\n",
    "  kl, kr = left_fit_curve_pix, right_fit_curve_pix\n",
    "  xl = kl[0] * (y**2) + kl[1]* y + kl[2]\n",
    "  xr = kr[0] * (y**2) + kr[1]* y + kr[2]\n",
    "  pix_pos = xl + (xr - xl) / 2\n",
    "  vehicle_position = (pix_pos - mid) * xm_per_pix \n",
    "\n",
    "  if vehicle_position < 0:\n",
    "    vehicle_position_words = str(np.absolute(np.round(vehicle_position, 2))) + \" m left of center\"\n",
    "  elif vehicle_position > 0:\n",
    "    vehicle_position_words = str(np.absolute(np.round(vehicle_position, 2))) + \" m right of center\"\n",
    "  else:\n",
    "    vehicle_position_words = \"at the center\"\n",
    "\n",
    "\n",
    "  result = {\n",
    "    'image': out_img,\n",
    "    'left_radius': left_radius,\n",
    "    'right_radius': right_radius,\n",
    "    'real_left_best_fit_curve': left_fit_curve_f,\n",
    "    'real_right_best_fit_curve': right_fit_curve_f, \n",
    "    'pixel_left_best_fit_curve': left_fit_curve_pix,\n",
    "    'pixel_right_best_fit_curve': right_fit_curve_pix, \n",
    "    'vehicle_position': vehicle_position, \n",
    "    'vehicle_position_words': vehicle_position_words\n",
    "  }\n",
    "  return result\n",
    "\n",
    "def curve_test(path):\n",
    "  img = cv2.imread(path, cv2.IMREAD_COLOR)\n",
    "  img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n",
    "  binary = lane_filter_apply(img)\n",
    "  wb = np.logical_and(birdeye_sky_view(binary), roi(binary)).astype(np.uint8)\n",
    "  result = curves_fit(wb)\n",
    "  print(\"[real world] left best-fit curve parameters:\", result['real_left_best_fit_curve'])\n",
    "  print(\"[real world] right best-fit curve parameters:\", result['real_right_best_fit_curve'])\n",
    "  print(\"[pixel] left best-fit curve parameters:\", result['pixel_left_best_fit_curve'])\n",
    "  print(\"[pixel] left best-fit curve parameters:\", result['pixel_right_best_fit_curve'])\n",
    "  print(\"[left] current radius of curvature:\", result['left_radius'], \"m\")\n",
    "  print(\"[right] current radius of curvature:\", result['right_radius'], \"m\")\n",
    "  print(\"vehicle position:\", result['vehicle_position_words'])\n",
    "  plt.imshow(result['image'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[real world] left best-fit curve parameters: [-1.60367402e-04  4.04098503e-03  1.71471289e+00]\n",
      "[real world] right best-fit curve parameters: [ 1.44923355e-04 -3.24447886e-03  5.03751363e+00]\n",
      "[pixel] left best-fit curve parameters: [-5.26732269e-05  3.18546117e-02  3.24405142e+02]\n",
      "[pixel] left best-fit curve parameters: [ 4.76005764e-05 -2.55758468e-02  9.53043119e+02]\n",
      "[left] current radius of curvature: 3117.9863017226535 m\n",
      "[right] current radius of curvature: 3450.253305542252 m\n",
      "vehicle position: 3.36 m right of center\n"
     ]
    },
    {
     "data": {
      "image/png": "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+fa3vw3onrVHqO7R2rVrcbvdjB8/3l/n3HPPxe1294r7WFZWhsPhoG/fvkD3uGfdarHAAwcOUF9fT2pqasD21NRUioqKLIrKPowx3HfffVxwwQVkZmYC+O9LS/fs66+/9teJjo4mKSmpWZ2eel/z8vLYuHEjGzZsaLZP96xlX331FU8++ST33XcfP//5z1m/fj0//vGPcblcfP/739d9a8HPfvYzysrKOP3004mMjKS+vp7HHnuM733ve4C+19ojVPeoqKiI/v37Nzt///79e/x9PHr0KA8++CAzZ870LwzYHe5Zt0pQjnE4HAGvjTHNtvVG99xzD5988gmrV69utq8j96yn3teCggLuvfdeli1bRkxMTKv1dM8Ceb1exo4dS25uLgBjxoxh27ZtPPnkk3z/+9/319N9O+7ll1/mxRdf5KWXXmLkyJFs3ryZ7Oxs0tLSuOWWW/z1dM/aFop71FL9nn4fa2trueGGG/B6vTzxxBNt1rfTPetWj3j69etHZGRks8ytuLi4WXbd28yaNYs33niDlStXMmjQIP92j8cDcMJ75vF4qKmpoaSkpNU6PUl+fj7FxcVkZWURFRVFVFQUq1at4ne/+x1RUVH+r1n3LNCAAQMYMWJEwLYzzjiD3bt3A/pea8lPf/pTHnzwQW644QZGjRrFzTffzE9+8hPmzp0L6J61R6jukcfjYf/+/c3O/8033/TY+1hbW8t1113Hzp07Wb58ub/1BLrHPetWCUp0dDRZWVksX748YPvy5cuZMGGCRVFZyxjDPffcw2uvvcZ7771Henp6wP709HQ8Hk/APaupqWHVqlX+e5aVlYXT6QyoU1hYyNatW3vkfb300kvZsmULmzdv9pexY8dy4403snnzZoYNG6Z71oLzzz+/2RD2zz//nKFDhwL6XmvJkSNHiIgIfJuNjIz0DzPWPWtbqO7ReeedR1lZGevXr/fXWbduHWVlZT3yPh5LTr744gtWrFhBSkpKwP5ucc+6vBtuiB0bZvzss8+a7du3m+zsbBMfH2927dpldWiW+NGPfmTcbrd5//33TWFhob8cOXLEX2fevHnG7Xab1157zWzZssV873vfa3GI3qBBg8yKFSvMxo0bzSWXXNKjhjG2pfEoHmN0z1qyfv16ExUVZR577DHzxRdfmD/96U8mLi7OvPjii/46um+BbrnlFjNw4ED/MOPXXnvN9OvXzzzwwAP+OrpnvhF1mzZtMps2bTKAWbBggdm0aZN/xEmo7tFll11mRo8ebdauXWvWrl1rRo0a1W2HGZ/ontXW1poZM2aYQYMGmc2bNwf8bqiurvafw+73rNslKMYY8/vf/94MHTrUREdHm7PPPts/pLY3Aloszz33nL+O1+s1Dz/8sPF4PMblcpmLLrrIbNmyJeA8VVVV5p577jHJyckmNjbWTJ8+3ezevTvMX411miYoumct+/vf/24yMzONy+Uyp59+unn66acD9uu+BSovLzf33nuvGTJkiImJiTHDhg0zDz30UMAvCd0zY1auXNni+9gtt9xijAndPTp48KC58cYbTUJCgklISDA33nijKSkpCdNXGVonumc7d+5s9XfDypUr/eew+z1zGGNM17fTiIiIiLRft+qDIiIiIr2DEhQRERGxHSUoIiIiYjtKUERERMR2lKCIiIiI7ShBEREREdtRgiIiIiK2owRFREREbEcJioiIiNiOEhQRERGxHSUoIiIiYjtKUERERMR2/j/BhHGuRmymJQAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "curve_test('images/straight_lines1.jpg')\n",
    "\n",
    "# path = 'images/straight_lines1.jpg'\n",
    "# img = cv2.imread(path, cv2.IMREAD_COLOR)\n",
    "# img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n",
    "# binary = lane_filter_apply(img)\n",
    "# binary = np.logical_and(birdeye_sky_view(binary), roi(binary)).astype(np.uint8)\n",
    "# h,w = binary.shape[:2]\n",
    "# hist = np.sum(binary[int(h / 2):, :], axis = 0)\n",
    "# print(hist.shape)\n",
    "# mid = int(hist.shape[0] / 2)\n",
    "# print(mid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[real world] left best-fit curve parameters: [ 2.65050362e-03 -1.72444707e-01  4.58772987e+00]\n",
      "[real world] right best-fit curve parameters: [ 1.10162771e-03 -7.14978336e-02  5.94958060e+00]\n",
      "[pixel] left best-fit curve parameters: [ 8.70567067e-04 -1.35936143e+00  8.67948895e+02]\n",
      "[pixel] left best-fit curve parameters: [ 3.61833426e-04 -5.63609049e-01  1.12559633e+03]\n",
      "[left] current radius of curvature: 188.69431594275594 m\n",
      "[right] current radius of curvature: 453.8936950736778 m\n",
      "vehicle position: 3.28 m right of center\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "curve_test('images/curve_lines1.jpg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0]\n",
      " [1 3 1 0 4 0]\n",
      " [0 1 0 0 2 0]]\n",
      "4 6\n",
      "[1 4 1 0 6 0]\n",
      "6 3\n",
      "1 4\n"
     ]
    }
   ],
   "source": [
    "binary = np.array([[0,0,0,0,0,0],[0,0,0,0,0,0],[1,3,1,0,4,0],[0,1,0,0,2,0]])\n",
    "print(binary)\n",
    "h,w = binary.shape[:2]\n",
    "print(h,w)\n",
    "hist = np.sum(binary[int(h / 2):, :], axis = 0)\n",
    "print(hist)\n",
    "mid = w//2\n",
    "print(w,mid)\n",
    "print(np.argmax(hist[:mid]), hist[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
